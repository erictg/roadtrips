package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"github.com/erictg/roadtrips/services/destination/graph/model"
	"googlemaps.github.io/maps"
)

// RandomDestinationWithinRing is the resolver for the randomDestinationWithinRing field.
func (r *queryResolver) RandomDestinationWithinRing(ctx context.Context, args model.RandomDestinationWithinRing) (model.Destination, error) {
	res, err := r.client.GetRandomDestination(ctx, adaptPointToLatLon(*args.Ring.Center),
		lengthToMeters(*args.Ring.InnerRadius), lengthToMeters(*args.Ring.OuterRadius), adaptDestinationTypeToPlaceType(args.Filters.Type))
	if err != nil {
		return nil, fmt.Errorf("failed to get random destionation, %w", err)
	}

	return model.Restaurant{
		Rating:       ptrOf(float64(res.Rating)),
		Latitude:     res.Geometry.Location.Lat,
		Longitude:    res.Geometry.Location.Lng,
		Name:         res.Name,
		Types:        res.Types,
		Hours:        res.OpeningHours.WeekdayText,
		NumRatings:   &res.UserRatingsTotal,
		IconURL:      &res.Icon,
		WazeDeeplink: getWazeURL(res.Geometry.Location),
	}, nil
}

// RandomDestinationsWithinRing is the resolver for the randomDestinationsWithinRing field.
func (r *queryResolver) RandomDestinationsWithinRing(ctx context.Context, args model.RandomDestinationsWithinRing) ([]model.Destination, error) {
	results, err := r.client.GetRandomDestinations(ctx, adaptPointToLatLon(*args.Ring.Center),
		lengthToMeters(*args.Ring.InnerRadius), lengthToMeters(*args.Ring.OuterRadius), adaptDestinationTypeToPlaceType(args.Filters.Type))
	if err != nil {
		return nil, fmt.Errorf("failed to get random destionations, %w", err)
	}

	restys := make([]model.Destination, len(results))
	for i, res := range results {
		restys[i] = model.Restaurant{
			Rating:       ptrOf(float64(res.Rating)),
			Latitude:     res.Geometry.Location.Lat,
			Longitude:    res.Geometry.Location.Lng,
			Name:         res.Name,
			Types:        res.Types,
			Hours:        res.OpeningHours.WeekdayText,
			NumRatings:   &res.UserRatingsTotal,
			IconURL:      &res.Icon,
			WazeDeeplink: getWazeURL(res.Geometry.Location),
		}
	}

	return restys, nil
}

// EstimatedTravelTime is the resolver for the estimatedTravelTime field.
func (r *restaurantResolver) EstimatedTravelTime(ctx context.Context, obj *model.Restaurant, origin model.Point) (string, error) {
	dur, err := r.client.GetTravelTime(ctx, adaptPointToLatLon(origin), &maps.LatLng{
		Lat: obj.Latitude,
		Lng: obj.Longitude,
	})
	if err != nil {
		return "", fmt.Errorf("failed to get duration, %w", err)
	}

	return dur.String(), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Restaurant returns RestaurantResolver implementation.
func (r *Resolver) Restaurant() RestaurantResolver { return &restaurantResolver{r} }

type queryResolver struct{ *Resolver }
type restaurantResolver struct{ *Resolver }
